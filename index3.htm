<html>
  <head>
    <script type="text/javascript" src="./d3.min.js"></script>
    <style type="text/css" media="screen">
      .svg rect {
        stroke: white;
        fill: white;
      }
    </style>
  </head>
  <body>
    <div id="events">
      
    </div>
    <div id="chart">
      
    </div>
    <script type="text/javascript">
      var parseTime = function(string){
        var delimiters = string.match(':') && string.split(':').length  
        var parsed = null;
        switch(delimiters)
        {
          case 3:
            var ary  = string.split(':')
            var hour = parseFloat(ary[0])
            var min  = parseFloat(ary[1])
            var sec  = parseFloat(ary[2])
            parsed   = (((hour * 60) + min) * 60) + sec
            break;
          case 2:        
            var ary = string.split(':')
            var min = parseFloat(ary[0])
            var sec = parseFloat(ary[1])
            parsed  = ( min * 60) + sec
            break;
          default:
            parsed = parseFloat(string)
        }
        return parsed
      }
  
  
      var draw = function(selected){
        years = d3.nest().key(function(d){return d.year}).entries(selected)
          .map(function(d){
            d.gold =   d.values.filter(function(d){return d.medal == "GOLD"})[0]
            d.silver = d.values.filter(function(d){return d.medal == "SILVER"})[0]
            d.bronze = d.values.filter(function(d){return d.medal == "BRONZE"})[0]
            return d
          })

        players = d3.nest().key(function(d){return d.person}).entries(selected)
        // players.map(function(d){
        //   console.log([d.key, d.values])
        // })
        

        var golds = years.map(function(d) {
          return parseTime(d.gold.time)
        })

        var silver = years.map(function(d) {
          return parseTime(d.silver.time)
        })

        var bronze = years.map(function(d) {
          return parseTime(d.bronze.time)
        })

        var xGold = d3.scale.linear()
            .domain([0, d3.max(golds)])
            .range([0, width - 10]);

        var yGold = d3.scale.ordinal()
          .domain([0, 26])
          .rangeBands([10, height - 50]);

        var xAxis = d3.svg.axis()
          .scale(xGold)
          .orient("top")
          .tickSize(1)   



        svg.append("g")
          .attr("class", "x axis");

        d3.select(".x.axis")
          .call(xAxis);

        Years = years
        
        var group = svg.selectAll(".group")
            .data(years, function(d){return d.key});

        var groupEnter = group.enter().append('g')
          .attr('class', 'group')

        var groupUpdate = group.transition().duration(1000)

        var groupExit = d3.transition(group.exit())
          .remove()

        getDiff = function(d, slower, faster){
          // console.log('getDiff', d, slower, faster)
          return parseTime(d[slower].time) - parseTime(d[faster].time) 
        }
        
        groupEnter.append('rect').attr('class', 'silver')
        
        groupUpdate.select('.silver')
          .attr("y", function(d,i){ return i * 19})
          .attr("x", function(d){return xGold(parseTime(d.gold.time))})
          .attr("width", function(d){
            var diff = getDiff(d, 'silver', 'gold')
            return xGold(diff) +2
          })
          .attr("height", 12)
          .style('fill', 'grey')

        groupEnter.append('rect').attr('class', 'gold')
        groupUpdate.select('.gold')
          .attr("y", function(d,i){ return i * 19})
          .attr("x", 0)
          .attr("width", function(d){return xGold(parseTime(d.gold.time))})
          .attr("height", 12)
          .style('fill', 'gold')

        groupEnter.append('rect').attr('class', 'bronze')
        groupUpdate.select('.bronze')
          .attr("y", function(d,i){ return i * 19})
          .attr("x", function(d){return xGold(parseTime(d.silver.time))})
          .attr("width", function(d){
            return xGold(parseTime(d.bronze.time) - parseTime(d.silver.time)) + 2
          })
          .attr("height", 12)
          .style('fill', 'maroon')


        groupEnter.append("text").attr('class', 'year')
        groupUpdate.select('.year')
          .attr("y", function(d,i){ return (i * 19) + 7 })
          .attr("x", 50)
          .attr("dx", -3)
          .attr("dy", ".35em")
          .attr("text-anchor", "end")
          .text(function(d){return d.gold.year})

        d3.selectAll('.year')
          .on('click', function(d){ 
            console.log(getDiff(d, 'silver', 'gold').toPrecision(3), d.gold.country, d.gold.person, d.gold.time, d.silver.country, d.silver.person, d.silver.time)
          })
        
      }

      var width = 600
        ,height = 600
      
      var svg = d3.select("#chart").append("svg")
          .attr("class", "svg")
          .attr("width", width + 100)
          .attr("height", height)      
      
      d3.json("historical.json", function(data) {
        Data = data
        
        events = d3.nest()
          .key(function(d){return d.category})
          .key(function(d){return d.event})
            .entries(data)

        events.forEach(function(c){
          category = d3.select("#events").append('div')
          category.append('h5').text(c.key)
          c.values.forEach(function(e){
            category.insert('a')
              .attr('href', '#' + e.key)
              .text(e.key)
              .on('click', function(d){
                var event_name = this.text;
                var selected = data.filter(function(d){return d.event == event_name})
                draw(selected)
              })
            category.insert('text')
              .text(',')
            
          })
        })
        
        draw(data.filter(function(d){return d.event == '100m Men'}))
      });
      
        
    </script>
  </body>
</html>